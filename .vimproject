rbbt-util=/$PWD filter="*.rb *.rake Rakefile *.rdoc *.R *.sh *.js *.haml *.sass *.txt *.conf LICENSE" {
 Migration-1.9.txt
 Troubleshooting.txt
 ToDo.txt
 Rakefile
 LICENSE
 README.rdoc
 bin=bin filter="*" {
  excel2tsv.rb
  rbbt
  rbbt_Rutil.rb
  rbbt_dangling_locks.rb
  rbbt_exec.rb
  rbbt_query.rb
 }
 lib=lib{
  rbbt.rb
  rbbt-util.rb
  rbbt=rbbt{
   monitor.rb
   util=util{
    misc.rb
    misc=misc{
     exceptions.rb
     concurrent_stream.rb
     indiferent_hash.rb
     pipes.rb
     format.rb
     omics.rb
     inspect.rb
     math.rb
     development.rb
     lock.rb
     options.rb
     system.rb
     objects.rb
     manipulation.rb
     bgzf.rb
    }
    tar.rb
    color.rb
    colorize.rb
    named_array.rb
    cmd.rb
    log.rb
    log=log{
     progress.rb
     progress=progress{
      util.rb
      report.rb
     }
    }
    open.rb
    semaphore.rb

    simpleopt.rb
    simpleopt=simpleopt{
     accessor.rb
     doc.rb
     parse.rb
     get.rb
     setup.rb
    }

    simpleDSL.rb

    chain_methods.rb

    tmpfile.rb
    filecache.rb

    R.rb
    R=R{
     eval.rb
    }

    excel2tsv.rb
    
    concurrency.rb
    concurrency=concurrency{
     threads.rb
     processes.rb
     processes=processes{
      worker.rb
      socket.rb
     }
    }
   }

   workflow.rb
   workflow=workflow{
    annotate.rb
    definition.rb
    doc.rb
    examples.rb
    
    task.rb
    step.rb
    step=step{
     run.rb
    }
    accessor.rb

    usage.rb
    soap.rb
   }

   tsv.rb
   tsv=tsv{
    parser.rb
    dumper.rb

    accessor.rb
    util.rb
    serializers.rb
    manipulate.rb
    index.rb
    stream.rb
    attach.rb
    attach=attach{
     util.rb
    }
    excel.rb
    filter.rb
    field_index.rb
    change_id.rb
    parallel.rb
    parallel=parallel{
     traverse.rb
     through.rb
    }
   }

   packed_index.rb
   fix_width_table.rb

   persist.rb
   persist=persist{
    tsv.rb
    tsv=tsv{
     sharder.rb
     adapter.rb
     tokyocabinet.rb
     fix_width_table.rb
     packed_index.rb
     kyotocabinet.rb
     lmdb.rb
     cdb.rb
     leveldb.rb
    }
   }

   resource.rb
   resource=resource{
    path.rb
    util.rb
    with_key.rb
    rake.rb
   }

   annotations.rb
   annotations=annotations{
    util.rb
    annotated_array.rb
   }
   entity.rb

   association.rb
   association=association{
    index.rb
    item.rb
   }

   knowledge_base.rb
  }
 }
 test=test {
  data=data{
   identifiers
  }
  test_helper.rb
  rbbt=rbbt{
   test_annotations.rb
   test_association.rb
   test_entity.rb
   test_fix_width_table.rb
   test_knowledge_base.rb
   test_persist.rb
   test_resource.rb
   test_tsv.rb
   test_workflow.rb
   workflow=workflow{
    _test_soap.rb
    test_doc.rb
    test_step.rb
    test_task.rb
   }
   association=association{
    test_index.rb
    test_item.rb
   }
   persist=persist{
    test_tsv.rb
   }
   tsv=tsv{
    test_accessor.rb
    test_attach.rb
    test_change_id.rb
    test_field_index.rb
    test_filter.rb
    test_index.rb
    test_manipulate.rb
    test_parallel.rb
    parallel=parallel{
     test_through.rb
     test_traverse.rb
    }
    test_parser.rb
    test_util.rb
    }
   util=util{
    simpleopt=simpleopt{
     test_get.rb
     test_parse.rb
     test_setup.rb
    }
    concurrency=concurrency{
     test_processes.rb
     test_threads.rb
     }
    test_R.rb
    test_chain_methods.rb
    test_cmd.rb
    test_colorize.rb
    test_excel2tsv.rb
    test_filecache.rb
    test_log.rb
    test_misc.rb
    test_open.rb
    test_semaphore.rb
    test_simpleDSL.rb
    test_simpleopt.rb
    test_tmpfile.rb
   }
  }
 }
 integration_test=integration_test{
  test_bed.rb
  test_helper.rb
  test_namespaces.rb
  test_workflow.rb
 }
 etc=etc filter="*"{
  app.d=app.d{
   init.rb
   base.rb
   entities.rb
   finder.rb
   resources.rb
  }
 }
 share=share{
  config.ru
  unicorn.rb
  color=color filter="*"{
   diverging_colors.hex
  }
  rbbt_commands=rbbt_commands filter="*"{
   alias
   color
   log
   system=system{
    deleted_files
    status
    clean
    report
    purge
   }
   conf=conf{
    web_user=web_user{
     add
     list
     remove
    }
   }
   resource=resource{
    find
    exists
    produce
    get
   }
   workflow=workflow{
    task
    knowledge_base
    jobs
    example
    list
    server
    install
    cmd
    monitor
    prov
    info
    remote=remote{
     list
     add
     remove
    }
   }
   app=app{
    template
    start
    install
   }
   association=association{
    subset
   }
   tsv=tsv{
    info
    sort
    unzip
    get
    read
    values
    change_id
    attach
    json
    subset
    slice
    assemble_pdf_table
   }
   stat=stat{
    abs
    log
    density
   }
   study=study{
    task
   }
   file_server=file_server{
    list
    add
    remove
   }
   benchmark=benchmark{
    pthrough
    tsv
    throughput
   }
  }
  Rlib=Rlib{
   util.R
  }
  software=install/software{
   zran=zran{
    zran.c
   }
   lib=lib{
    install_helpers
   }
  }
 }
}
