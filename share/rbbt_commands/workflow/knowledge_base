#!/usr/bin/env ruby

require 'rbbt/util/simpleopt'
require 'rbbt/workflow'
require 'rbbt/workflow/usage'
require 'time'

options = SOPT.setup <<EOF
Access workflow knowledge_base

$ rbbt workflow knowledge_base <workflow> [<database>] [<action>] [<options>]

Access workflow knowledge base

-h--help Show this help:
-cl--clean Clean the last step of the job so that it gets recomputed:
-s--source_entities* Source entities
-sf--source_format* Source format
-t--target_entities* Target entities
-tf--target_format* Target format
-d--details Print details on matches
-i--identify Attempt to identify entities by identifier translation
-tsv--tsv Output TSV
EOF

workflow = ARGV.shift
usage and exit -1 if workflow.nil? or options[:help]

database     = ARGV.shift
action       = ARGV.shift

# Get workflow

workflow = Workflow.require_workflow workflow

action = :list_databases if database.nil?
action ||= :summary 

knowledge_base = workflow.knowledge_base

case action.to_sym
when :list_databases
  dbs = knowledge_base.registry.keys
  puts dbs * "\n"
when :summary
  db = knowledge_base.get_database(database)
  puts db.summary
when :subset
  source_format = options[:source_format] || :source
  target_format = options[:target_format] || :target
  source_entities = options[:source_entities] || :all
  target_entities = options[:target_entities] || :all

  source_entities = source_entities.split(/[,|]/) if String === source_entities
  target_entities = target_entities.split(/[,|]/) if String === target_entities

  if options[:identify]
    source_entities = knowledge_base.identify_source(database, source_entities)
    target_entities = knowledge_base.identify_target(database, target_entities)
  end
  entities = {source_format => source_entities, target_format => target_entities}

  matches = knowledge_base.subset(database, entities)

  if options[:tsv]
    puts matches.tsv.to_s
  else
    matches.each do |item|
      puts Log.color(:magenta, item)
      info = item.info
      source,_sep, target = item.partition "~"
      puts "  " << Misc.format_definition_list_item("source", source)
      puts "  " << Misc.format_definition_list_item("target", target)
      info.each do |key,value|
        puts "  " << Misc.format_definition_list_item(key, value)
      end
    end
  end
end
