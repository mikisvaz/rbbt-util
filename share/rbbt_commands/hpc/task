#!/usr/bin/env ruby

require 'rbbt/util/simpleopt'
require 'rbbt/workflow'
require 'rbbt/workflow/usage'
require 'rbbt/workflow/remote_workflow'
require 'rbbt/hpc'
require 'time'

rbbt_options = SOPT::GOT_OPTIONS

$batch_options = SOPT.get <<EOF
-dr--dry_run Print only the template
-cj--clean_job Clean job
--drbbt* Use development version of rbbt 
-sing--singularity Use Singularity
-si--singularity_img* Singularity image to use
-sm--singularity_mounts* Singularity image to use
-ug--user_group* Use alternative user group for group project directory
--contain* Contain in directory (using Singularity)
--sync* Contain in directory and sync jobs
--exclusive Make exclusive use of the node
-hm--highmem Make use of highmem cores
-wc--wipe_container* Wipe the jobs from the contain directory
-pd--purge_deps Purge job dependencies
-CS--contain_and_sync Contain and sync to default locations
-ci--copy_image When using a container directory, copy image there
-t--tail Tail the logs
-BPP--batch_procpath* Save Procpath performance for batch job; specify only options
-q--queue* Queue
-a--account* Account
-p--partition* Partition
-t--task_cpus* Tasks
-tm--time* Time
-m--mem* minimum memory
--gres* Generic resources
-mcpu--mem_per_cpu* minimum memory per CPU
-lin--licenses* licenses
-cons--constraint* constraint
-W--workflows* Additional workflows
-rmb--remove_batch_dir Remove the batch working directory (command, STDIN, exit status, ...)
-bs--batch_system* Batch system to use: auto, lsf, slurm (default is auto-detect)
-lmod--lua_modules* Lua Modules to load 
-co--conda* Conda environment to use
-OR--orchestration_rules* Orchestration rules
EOF

batch_system = $batch_options.delete :batch_system
batch_system ||= 'auto'
$batch_options[:log] = rbbt_options[:log]
$batch_options[:config_keys] = rbbt_options[:config_keys]

HPC::BATCH_MODULE = HPC.batch_system batch_system

raise ParameterException.new("Could not detect batch_system: #{Misc.fingerprint batch_system}") if HPC::BATCH_MODULE.nil?

class Step

  def run(*args)
    if done?
      self.load
    else
      begin
        Log.debug "Issuing BATCH job for #{self.path}"
        HPC::BATCH_MODULE.run_job(self, $batch_options) 
      rescue HPC::BATCH_DRY_RUN
      end
    end
  end
end

module RemoteStep::SSH

  def _run
    RemoteWorkflow::SSH.run_slurm_job(File.join(base_url, task.to_s), @input_id, @base_name, $batch_options)
  end

end

SOPT.current_options = rbbt_options
load Rbbt.share.rbbt_commands.workflow.task.find
