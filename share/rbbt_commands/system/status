#!/usr/bin/env ruby

require 'rbbt-util'
require 'rbbt/util/simpleopt'
require 'rbbt/workflow'
require 'rbbt/monitor'

$0 = "rbbt #{$previous_commands*""} #{ File.basename(__FILE__) }" if $previous_commands

options = SOPT.setup <<EOF

Report the status of the system

$ rbbt system status 

-h--help Print this help
EOF
rbbt_usage and exit 0 if options[:help]


def pid_msg(pid)
  color = if Misc.pid_exists? pid
            :green
          else
            :red
          end
  Log.color(color, pid)
end

def status_msg(status)
  color = case status
          when :error, :aborted, :missing
            :red
          when :streaming, :started
            :yellow
          when :done
            :green
          else
            if status.to_s.index ">"
              :yellow
            else
              nil
            end
          end
  Log.color(color, status)
end

locks = Rbbt.locks
sensiblewrites = Rbbt.sensiblewrites
persists = Rbbt.persists

puts Log.color(:magenta, "# System report")
puts
if locks.any?
  puts Log.color(:magenta, "Locks:")
  locks.each do |lock|
    pid, ppid, time = Rbbt.load_lock(lock)
    time ||= File.atime lock
    puts "  " << lock + Log.color(:blue, " -- time: #{Time.now - time}; ppid: #{ppid}; pid: #{pid_msg pid}")
  end
  puts
end

if persists.any?
  puts Log.color(:magenta, "Persist:")
  persists.each do |persist|
    puts "  " << persist
  end
  puts
end

if sensiblewrites.any?
  puts Log.color(:magenta, "Writing:")
  sensiblewrites.each do |sensiblewrite|
    pid, ppid, time = Rbbt.load_lock(sensiblewrite + '.lock')
    puts "  " << sensiblewrite + Log.color(:blue, " -- time: #{Time.now - time}; ppid: #{ppid}; pid: #{pid_msg pid}")
  end
  puts
end

jobs = Rbbt.jobs

puts Log.color(:magenta, "# Workflows:")
puts
jobs.each do |workflow, tasks|
  tasks.each do |task, jobs|
    puts "* " << Log.color(:magenta, workflow) << "#" << Log.color(:yellow, task) << ": "
    done = []
    other = {}
    jobs.each do |file,h|
      status = h[:status]
      if h[:status] == :done
        done << file
      else
        other[status||"missing"] ||= []
        other[status||"missing"] << [file, h[:pid]]
      end
    end
    puts "  " << Log.color(:green, "done") << ": " << done.length.to_s
    other.each do |status, list|
      puts "  " << status_msg(status) << ": " << list.collect{|f,p| p.nil? ? f : f + " (#{pid_msg p})"} * ", "
    end
  end
end

