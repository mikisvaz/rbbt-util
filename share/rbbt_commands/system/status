#!/usr/bin/env ruby

require 'rbbt-util'
require 'rbbt/util/simpleopt'
require 'rbbt/workflow'
require 'rbbt/monitor'

$0 = "rbbt #{$previous_commands*""} #{ File.basename(__FILE__) }" if $previous_commands

options = SOPT.setup <<EOF

Report the status of the system

$ rbbt system status 

-a--all Print all jobs, not only uncompleted
-h--help Print this help
EOF
rbbt_usage and exit 0 if options[:help]

all = options.delete :all

def pid_msg(pid)
  color = if pid and Misc.pid_exists? pid
            :green
          else
            :red
          end
  if pid.nil?
    ""
  else
    Log.color(color, pid)
  end
end

def status_msg(status)
  color = case status
          when :error, :aborted, :missing
            :red
          when :streaming, :started
            :yellow
          when :done
            :green
          else
            if status.to_s.index ">"
              :yellow
            else
              nil
            end
          end
  Log.color(color, status.to_s)
end

puts Log.color(:magenta, "# System report")
puts

locks = Rbbt.lock_info
if locks.any?
  puts Log.color(:magenta, "Locks:")
  locks.sort_by{|f,i| i[:ctime] }.each do |file,info|
    elapsed, pid, ppid = info.values_at :elapsed, :pid, :ppid
    puts "  " << file + Log.color(:blue, " -- time: #{Misc.format_seconds elapsed}; ppid: #{ppid}; pid: #{pid_msg pid}")
  end
  puts
end


persists = Rbbt.persist_info
if persists.any?
  puts Log.color(:magenta, "Persist:")
  persists.sort_by{|f,i| i[:ctime] }.each do |file,info|
    elapsed = info[:elapsed]
    puts "  " << file + Log.color(:blue, " -- time: #{Misc.format_seconds elapsed}")
  end
  puts
end

sensiblewrites = Rbbt.sensiblewrite_info
if sensiblewrites.any?
  puts Log.color(:magenta, "Writing:")
  sensiblewrites.sort_by{|f,i| i[:ctime] }.each do |file,info|
    elapsed = info[:elapsed]
    puts "  " << file + Log.color(:blue, " -- time: #{Misc.format_seconds elapsed}")
  end
  puts
end


puts Log.color(:magenta, "# Workflows")

jobs = Rbbt.jobs
workflows = {}

jobs.each do |job|
  job.workflow
end
#jobs = Rbbt.jobs
#jobs.each do |workflow, tasks|
#  tasks.each do |task, jobs|
#    done = []
#    other = {}
#    jobs.each do |file,h|
#      status = h[:status]
#      if h[:status] == :done
#        done << file
#      else
#        other[status||"missing"] ||= []
#        other[status||"missing"] << [file, h[:pid]]
#      end
#    end
#    next if not all and other.empty?
#    puts "* " << Log.color(:magenta, workflow) << "#" << Log.color(:cyan, task) << ": " <<  Log.color(:blue, done.length.to_s) << " done"
#    other.each do |status, list|
#      files_txt = list.collect{|f,p| p.nil? ? f : (f + " (#{pid_msg p})") }
#      puts "  " << status_msg(status) << ": " << (files_txt * ", ")
#    end
#  end
#end

