#!/usr/bin/env ruby

require 'rbbt-util'
require 'rbbt/util/simpleopt'
require 'rbbt/workflow'
require 'rbbt/monitor'

$0 = "rbbt #{$previous_commands*""} #{ File.basename(__FILE__) }" if $previous_commands

options = SOPT.setup <<EOF

Clean orphaned files

$ rbbt system clean <workflow> <task>

-a--all Print all jobs, not only uncompleted
-f--force Remove regardless of been active
-h--help Print this help
EOF
rbbt_usage and exit 0 if options[:help]

workflow, task = ARGV

workflow = workflow.split "," if workflow
task = task.split "," if task

all = options.delete :all
force = options.delete :force

puts Log.color(:magenta, "# System clean")

locks = Rbbt.lock_info
if locks.any?
  puts
  puts Log.color(:magenta, "Locks:")
  locks.each do |file,info|
    if force or (info[:pid] and not Misc.pid_exists? info[:pid])
      puts "  Removing #{ file }"
      File.unlink file 
    end
  end
end

persists = Rbbt.persist_info
if persists.any?
  puts
  puts Log.color(:magenta, "Persist:")
  persists.each do |file,info|
    if force or (info[:pid] and Misc.pid_exists? info[:pid])
      puts "  Removing #{ file }"
      File.unlink file 
    end
  end
end

sensiblewrites = Rbbt.sensiblewrite_info
if sensiblewrites.any?
  puts
  puts Log.color(:magenta, "Writes:")
  sensiblewrites.each do |file,info|
    if force or (info[:pid] and Misc.pid_exists? info[:pid])
      puts "  Removing #{ file }"
      File.unlink file 
    end
  end
end

exit 0 if workflow.nil?
workflow = nil if workflow == ["all"]

puts
puts Log.color(:magenta, "# Workflow clean")
puts

jobs = Rbbt.job_info workflow, task
workflows = {}

jobs.each do |file,i|
  next if i[:done]
  info = begin
           Open.open(i[:info_file]) do |f|
             Marshal.load(f)
           end
         rescue
           {:status => :noinfo}
         end

  pid = info[:pid]

  status = info[:status]
  status = :missing if status == :done and not File.exists? file
  status = :dead if status != "done" and pid and not Misc.pid_exists?(pid)

  status = status.to_s
  next unless status =~ /\berror$/ or status =~ /\bmissing$/ or status =~ /\baborted$/ or status =~ /\bdead$/ or status == "" or (force and status == 'noinfo')
  puts "  Removing #{ file } - #{status}" 
  Step.clean(file) 
end

