#!/usr/bin/env ruby

require 'rbbt/util/simpleopt'
require 'rbbt/workflow'
require 'rbbt/workflow/usage'
require 'rbbt/hpc'
require 'rbbt/hpc/orchestrate'
require 'time'

$slurm_options = SOPT.get <<EOF
-dr--dry_run Print only the template
-cj--clean_job Clean job
--drbbt* Use development version of rbbt 
-sing--singularity Use Singularity
-ug--user_group* Use alternative user group for group project directory
-c--contain* Contain in directory (using Singularity)
-s--sync* Contain in directory and sync jobs
-e--exclusive Make exclusive use of the node
-hm--highmem Make use of highmem cores
-wc--wipe_container* Wipe the jobs from the contain directory
-CS--contain_and_sync Contain and sync to default locations
-ci--copy_image When using a container directory, copy image there
-t--tail Tail the logs
-q--queue* Queue
-t--task_cpus* Tasks
-W--workflows* Additional workflows
-tm--time* Time
-OR--orchestration_rules* Orchestration rules
-rmb--remove_slurm_basedir Remove the SLURM working directory (command, STDIN, exit status, ...)
EOF

class Step
    def run(*args)
        if done?
            self.load
        else
            begin
                Log.debug "Issuing SLURM job for #{self.path}"
                HPC::SLURM.orchestrate_job(self, SOPT::GOT_OPTIONS.merge($slurm_options)) 
            rescue HPC::SBATCH
            end
        end
    end
end

ARGV.concat ["-W", $slurm_options[:workflows], '--detach'] if $slurm_options[:workflows]
load Rbbt.share.rbbt_commands.workflow.task.find
